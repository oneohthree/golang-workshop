* Instrucciones de control
  :PROPERTIES:
  :CUSTOM_ID: instrucciones-de-control
  :END:

Golang soporta multiples instrucciones de control e iteradores.

** =if=/=else=
   :PROPERTIES:
   :CUSTOM_ID: if---else-if---else
   :END:

Se pueden tener muchas instrucciones =else if=. El bloque =else= es
opcional:

#+begin_src go
  if condition {
      // codigo a ejecutar
  } else if condition {
      // codigo a ejecutar
  } else {
      // codigo a ejecutar
  }
#+end_src

#+begin_quote
El bloque =else= debe estar en la misma linea que la llave de cierre
(=}=).
#+end_quote

*** Inicializar la condición.

La instruccion =if= soporta indicar una instruccion opcional que se
ejecuta antes de la condicion:

#+begin_src go
  if statement; condition {
      // codigo a ejecutar
  }
#+end_src

** =for=
   :PROPERTIES:
   :CUSTOM_ID: for
   :END:

Hay una sola instruccion de iteracion en Golang, el iterador =for=.

#+begin_src go
  for initialization; condition; post {
      // codigo a ejecutar
  }
#+end_src

Los tres componentes =initialization=, =condition= y =post= son
opcionales en Golang.

*** =for= en detalle

1. La inicialización se ejecuta una sola vez.
2. La condición se prueba antes de ejecutar el ciclo.
3. El post se ejecuta después de cada iteración del ciclo.

*** Ejemplo de =for=

El siguiente ejemplo imprime numeros del 1 al 10 usando un iterador
=for=:

#+begin_src go
  for i := 1; i <= 10; i = i + 1 {
      fmt.Println(i)
  }
#+end_src

** =switch=
   :PROPERTIES:
   :CUSTOM_ID: switch
   :END:

La instruccion de control =switch= evalua una expresion y la compara
contra una lista de posibles valores o expresiones que puedan coincidir.
Es una forma abreviada de escribir muchas clausulas =if else=.

#+begin_src go
  switch expression {
      case expression or value | (, expression or value)*:
          // codigo a ejecutar
	      (break | fallthrough)
      case expression or value | (, expression or value)*:
          // codigo a ejecutar
      default:
          // codigo a ejecutar
  }
#+end_src

*** =break=, =fallthrough= y =default=

1. =break= detiene el flujo y sale del =switch=
2. =fallthrough= continúa al próximo =case=.
2. Si no hay coincidencias, se ejecuta el codigo en el bloque
   =default=.
